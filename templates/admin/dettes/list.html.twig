{% extends 'base.html.twig' %}

{% block title %}Liste des Dettes{% endblock %}

{% block body %}
    <h1 class="text-3xl font-bold text-gray-800 mb-6">Liste des dettes</h1>


    <div class="flex justify-start space-x-4 mb-6">
        <a href="{{ path('admin_dette_archives') }}"
        class="bg-purple-400 text-white px-6 py-3 rounded-md hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-indigo-500">
            Voir les archives
        </a>
    </div>


    <!-- Table des dettes -->
    <div class="overflow-x-auto bg-white shadow rounded-lg">
        <table class="min-w-full table-auto border-separate border-spacing-0" id="dettes-table">
            <thead class="bg-purple-400 text-white">
                <tr>
                    <th class="px-6 py-3 text-left text-sm font-medium">Date</th>
                    <th class="px-6 py-3 text-left text-sm font-medium">Montant</th>
                    <th class="px-6 py-3 text-left text-sm font-medium">Montant Versé</th>
                    <th class="px-6 py-3 text-left text-sm font-medium">Montant Restant</th>
                    <th class="px-6 py-3 text-left text-sm font-medium">Statut</th>
                    <th class="px-6 py-3 text-left text-sm font-medium">Actions</th>
                </tr>
            </thead>
            <tbody id="dette-body">
                {% for dette in dettes %}
                <tr class="border-b hover:bg-gray-50 transition duration-300" data-id="{{ dette.id }}" data-statut="{{ dette.statutDette }}">
                    <td class="px-6 py-4 text-sm">{{ dette.createAt|date('d-m-Y') }}</td>
                    <td class="px-6 py-4 text-sm">{{ dette.montant }}</td>
                    <td class="px-6 py-4 text-sm">{{ dette.montantVerser }}</td>
                    <td class="px-6 py-4 text-sm">{{ dette.montantRestant }}</td>
                    <td class="px-6 py-4 text-sm">{{ dette.statutDette }}</td>
                    <td class="px-6 py-4">
                        {% if dette.statutDette == 'soldée' %}
                            <button class="bg-green-500 text-white px-4 py-2 rounded-md hover:bg-green-600 focus:outline-none focus:ring-2 focus:ring-green-300"
                                    onclick="archiverDette({{ dette.id }})">
                                Archiver
                            </button>
                        {% endif %}
                    </td>
                </tr>
                {% else %}
                <tr>
                    <td colspan="6" class="px-6 py-4 text-center text-gray-600">Aucune dette trouvée.</td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>

    <!-- Pagination -->
    <div id="paginationControls" class="mt-4 flex justify-center space-x-2"></div>

    <!-- Script -->
    <script>
        const dettesTable = document.getElementById('dettes-table');
        const paginationControls = document.getElementById('paginationControls');
        const rows = Array.from(dettesTable.querySelectorAll('tbody tr'));
        const itemsPerPage = 5; // Nombre d'éléments par page
        let currentPage = 1;

        function showPage(page) {
            rows.forEach((row, index) => {
                row.style.display = index >= (page - 1) * itemsPerPage && index < page * itemsPerPage ? '' : 'none';
            });
            updatePaginationControls();
        }

        function updatePaginationControls() {
            paginationControls.innerHTML = '';
            const totalPages = Math.ceil(rows.length / itemsPerPage);

            for (let i = 1; i <= totalPages; i++) {
                const button = document.createElement('button');
                button.textContent = i;
                button.className = `px-4 py-2 rounded-md ${i === currentPage ? 'bg-purple-500 text-white' : 'bg-gray-200 text-gray-800'}`;
                button.addEventListener('click', () => {
                    currentPage = i;
                    showPage(currentPage);
                });
                paginationControls.appendChild(button);
            }
        }

        function archiverDette(detteId) {
            const row = document.querySelector(`tr[data-id="${detteId}"]`);
            const statut = row.getAttribute('data-statut');
            
            if (statut === 'soldée') {
                // Ajouter la dette aux archives (simulé ici)
                // Code pour archiver ici, par exemple, ajouter à un tableau d'archives.
                alert('Dette archivée avec succès!');
                
                // Supprimer la ligne du tableau des dettes
                row.style.display = 'none';
            }
        }

        // Initialiser la pagination
        showPage(currentPage);

        // Fonction pour afficher les archives
        function showArchives() {
            const archiveWindow = window.open('', '', 'width=800,height=600');
            archiveWindow.document.write('<h1 class="text-2xl font-bold text-indigo-600 mb-4">Archives des Dettes Soldées</h1>');
            archiveWindow.document.write('<table class="min-w-full table-auto border...'); // Logique pour afficher les archives
        }
    </script>

{% endblock %}
